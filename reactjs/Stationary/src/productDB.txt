require('dotenv').config()
const express = require('express')
const mongoose = require('mongoose')
const cors = require('cors')
const multer = require('multer')
const path = require('path')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
var cookie = require('cookie');
var cookieParser = require('cookie-parser')
const authorize = require('../Middleware/authorize')

const admin = express()
//middleware
admin.use(express.json())
admin.use(cors())
admin.use(cookieParser())
// admin.use(express.static(__dirname+"./public/"))
mongoose.connect('mongodb+srv://root:190430@cluster0.4aeqend.mongodb.net/Stationary',(err)=>console.log('connected....'))

const ProductSchema = mongoose.Schema({
    productname:String,
    category:String,
    description:String,
    price:String,
    quantity:String,
    image:String,
    feature:Boolean
})


const Product = mongoose.model('Product',ProductSchema)



const StatUser =mongoose.Schema({
    firstname:String,
    lastname:String,
    email:String,
    password:String,
    tokens:[{
      token:{
        type:String
      }
      }],
      usercart:[{
        type:String
    }]
})
const User = mongoose.model('User',StatUser)
 
console.log(process.env.SECRET_KEY)
//storage
const Storage = multer.diskStorage({
    destination:(req,file,cb)=>cb(null, './public/uploads/'),
    filename:(req,file,cb)=>cb(null, file.originalname + "_" + Date.now() +path.extname(file.originalname))
})
const upload = multer({
   storage: Storage
    // fileFilter:(req,file,callback)=>{
    //     const extensions =['image/png','image/jpeg','image/jpg','image/webp']
    //     if(extensions.includes(file.mimetype)){
    //         callback(null,true)
    //         console.log('added image')
    //     }
    //     else{
    //         callback(new Error("Not Allowed!!!!!"))
    //     }
    // }
})

admin.get('/product',async(req,res)=>{
    console.log('showing products')
   const data = await Product.find()
    res.send(data)

})
admin.get('/hidden',authorize,(req,res)=>{
    if(error){
     console.log('getting error')
    }
    else{
     console.log('I m Fine')
    }
    let cid = cid
    const loggedUser=  User.find({_id:cid})
    console.log('token user detail',loggedUser)
})

admin.get('/product/:id',async(req,res)=>{
    //console.log('with id')
    const rid = req.params.id
   const data = await Product.findById({_id:rid})
   //console.log(data)
    res.send(data)
    
})

admin.get('product/product/:id',async(req,res)=>{
    //console.log('with id')
    const rid = req.params.id
   const data = await Product.findById({_id:rid})
   //console.log(data)
    res.send(data)
    
})

// admin.get('/detail/:cat',async(req,res)=>{
//     console.log('with category')
//     const search = req.params.cat
//    const data = await Product.find({category:search})
//    console.log(data)
//     res.send(data)
    
// })
admin.post('/product',upload.single('fileimage'),(req,res)=>{
    
    console.log(req.body.file,'sucesssssssss')
    const newProduct = new Product({ ProductName: req.body.productname,Category:req.body.category,Description: req.body.description, Price: req.body.rate, Quantity: req.body.quantity,Image:req.file.filename})
    newProduct.save()
        .then(result => {
            console.log('successfully saved')
        })
})

admin.post('/sign',(req, res) => {
    console.log('entered login')
     const {email,password} = req.body
     console.log(email,password)
      User.findOne({Email:email})
      .then(user=>{
       //console.log(result)
       if(user.length >0){
         console.log(user)
        //  const loggedpass = user[0].user.password
         //console.log(loggedpass)
      //    const isPasscorrect =  bcrypt.compareSync(password,loggedpass)
      //    if(isPasscorrect){
      //     res.json({msg:'password is correct'})
      // }else{
      //     res.json({msg:' password is incorrect'})
      // }   
       }
       else{
        res.json({
            msg:'username or password incorrect'
        })
    }
       })
     
    })
  


admin.patch('/product/:id',(req,res)=>{
      const uid = req.params.id
    
      let data = Product.findById(uid)
      res.send(data)

})


admin.delete('/product/:id',async(req,res)=>{
   console.log('deleting processss')
     let data = await Product.findByIdAndDelete({_id:req.params.id})
     console.log('hey u did it')
     res.send(data)

})

admin.post('/signin',(req,res)=>{
    console.log('entered')
    const password = bcrypt.hashSync(req.body.password,10)
    console.log(req.body)
    const user_data = new User({
       firstname: req.body.firstname,
       lastname: req.body.lastname, 
       email: req.body.email, 
       password:password,
    //  tokens : jwt.sign({_id:this._id},process.env.SECRET_KEY)   normal
       })
      let tokens =jwt.sign({_id:this._id},process.env.SECRET_KEY)  //abnormal
       user_data.tokens=user_data.tokens.concat({token:tokens})     //abnormal
      
       res.cookie("firstjwt",tokens,{
        // domain: "localhost",
        // path: "/",
        httpOnly: true
       });
       console.log('userdb toke is',tokens)
    user_data.save()
          .then(result => {
              console.log('successfully saved')
          })
          //res.status(200).send(JSON.stringify(tokens))
  })
  
  
  
  
  admin.post('/login',(req, res) => {
    console.log('entered login')
     const {email,password} = req.body
     console.log(email,password)
      User.findOne({email:email})
      .then(user=>{
        if(user){     //abnormal 1
       console.log('user is',user)
     let tokens = jwt.sign({_id:user._id},process.env.SECRET_KEY) //normal
    
     //let token = jwt.sign({_id:this._id},process.env.SECRET_KEY)  //abnormal
       //user.tokens=token.concat({token:token})     //abnormal
       
      res.cookie("firstjwt",tokens,{
        expires:new Date(Date.now() + 50000),
        // domain: "localhost",
        // path: "/",
        httpOnly: true
       });
       console.log('user logintoken is',tokens)
       //console.log(`this is checking cookie ${req.cookies.firstjwt}`)
       res.status(201).send(JSON.stringify(user))
      //  if(user.length >0){
      //    console.log(user)
      //    const loggedpass = user[0].user.password
      //    console.log('token verified')
      //    const isPasscorrect =  bcrypt.compareSync(password,loggedpass)
      //    if(isPasscorrect){
      //     res.json({msg:'password is correct'})
      // }else{
      //     res.json({msg:' password is incorrect'})
      // }   
       //}
    //    else{
    //     res.json({
    //         msg:'username or password incorrect'
    //     })
    // }
      }
          else{                                     //abnormal 1
            console.log('login else part running')   //abnormal 1
            console.log(user)                         //abnormal 1
            res.status(404).send(user)                //abnormal 1
          }                                           //abnormal 1
       })                                              
       
  })

admin.listen(4000,(err)=>console.log('running on 4000'))
module.exports = User





         SIGNNNNNNNNNNNNNNNNNNNNNNNNNN INNNNNN PAGEEEEEEE
import React, { useContext, useEffect, useState } from 'react'
import { Button, Form, Row ,Col} from 'react-bootstrap'
import { Link,useNavigate} from 'react-router-dom'
import {UserContext} from './App.js'
import {home} from './Home'
import { FcGoogle } from "react-icons/fc";

function Sign() {
  const navigate = useNavigate();
  const [show, setShow] = useState(false)
  const{state,dispatch} = useContext(UserContext)
 //const{localToken,setlocalToken} = useState('fbhjbgvjfvkj')
 let localToken ;
   const[User,setUser] = useState({
    firstname:'',
    lastname:'',
    email:'',
    password:''
   })
   const[LoginUser,setLoginUser] = useState({
    email:'',
    password:''
   })
let name,value
    const getData=(e)=>{
       name=e.target.name
       value=e.target.value
       setUser({...User, [name]:value})
       console.log(User)
    }
    const DBData= async()=>{
        console.log('helooooooo')
        const { firstname,lastname, email,password} = User
        if(firstname && lastname && email && password){
            let data = await fetch('/signin',{
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    //'Access-Control-Allow-Origin': '*'
                },
                body:JSON.stringify({firstname,lastname, email,password})
            })
           
            let res = await data.json()
            console.log('token is',res)  
           //let localToken=res
        }
        else{
            console.log('INVALID INPUT')
        }

    }


    const LoginData=(e)=>{
      name=e.target.name
      value=e.target.value
      setLoginUser({...LoginUser,[name]:value})
      console.log(value)
   }
   const LoginVerify= async()=>{
       console.log('helooooooo login')
       const {email,password} = LoginUser
        if(email && password){
          let data = await fetch('/login',{
              method:'POST',
              headers:{
                  'Content-Type':'application/json',
                  //'Access-Control-Allow-Origin': '*'
              },
              body:JSON.stringify({email,password})
          })
         
           let res = await data.json()
           console.log('hey',res) 
           //localStorage.setItem('trytoken',JSON.stringify(res))
          if(res.status === 404 ){
           window.alert("Invalid details")
          }
          else{
           dispatch({type:"USER",payload:true})
           window.alert("successfully logged in")
          navigate('/')
          
          }  
      }
      
      else{
          console.log('INVALID INPUT')
      }
       }
       
       const toggleForm = () => {
        setShow(!show)
       
    }
   
   useEffect(()=>{
   //localStorage.setItem('public',JSON.stringify(localToken))   //trylocal1
},[])
  return (
    <>
     <section className='body-divide container-fluid'>
                <div className={`container  ${show ? "active" : " "} `}>
                    <div className='user signinBx'>
                        <div className="imgBx"><img src="https://raw.githubusercontent.com/WoojinFive/CSS_Playground/master/Responsive%20Login%20and%20Registration%20Form/img1.jpg" alt="" /></div>
                        <div className="formBx">
                            <form action="POST" onSubmit={(e) => {
                                e.preventDefault()
                               
                            }}>
                                <h2>Sign In</h2>
                                <input type="email" name='email' value={LoginUser.email} onChange={LoginData} placeholder="Email Address" />
                                <input type="password"name='password' value={LoginUser.password} onChange={LoginData} placeholder=" Password" />
                                <input type="submit" onClick={LoginVerify} value="Login" />
                                <p className="signup">
                                    Don't have an account ?
                                    <a  onClick={toggleForm}>Sign Up.</a>
                                </p>

                                <p className='text-center'>Or</p>
                                <div className='google'>
                                    <FcGoogle className='googleSVG'></FcGoogle>
                                    <p className='googleBtn'>Continue with Google</p>
                                    
                                </div>
                            </form>
                        </div>
                    </div>
                    <div className="user signupBx">
                        <div className="formBx">
                            <form  onSubmit={(e) => {
                                e.preventDefault()
                                setUser({
                                  firstname:'',
                                  lastname:'',
                                  email:'',
                                  password:''
                                 })
                            }}>
                                <h2>Create an account</h2>
                                <input type="text" name='firstname' value={User.firstname} onChange={getData} placeholder="firstname" />
                                <input type="text" name='lastname' value={User.lastname} onChange={getData} placeholder="lastname" />
                                <input type="email" name='email' value={User.email} onChange={getData} placeholder="Email Address" />
                                <input type="password"name='password' value={User.password} onChange={getData} placeholder=" Password" />

                                <input type="submit" name="" value="Sign Up" onClick={DBData} />
                                <p className="signup">
                                    Already have an account ?
                                    <a  onClick={toggleForm} >Sign in.</a>
                                </p>
                                <p className='text-center'>Or</p>
                                <div className='google'>
                                    <FcGoogle className='googleSVG'></FcGoogle>
                                    <p className='googleBtn'>Continue with Google</p>
                                    
                                </div>
                            </form>
                        </div>
                        <div className="imgBx"><img src="https://raw.githubusercontent.com/WoojinFive/CSS_Playground/master/Responsive%20Login%20and%20Registration%20Form/img2.jpg" alt="" /></div>
                    </div>
                </div>
            </section>



































    {/* <Form action='POST' onSubmit={(e)=>{
      e.preventDefault()
      
    }}>
    <Row className="mb-3">
    <Form.Group as={Col}>
        <Form.Label>FirstName</Form.Label>
        <Form.Control type="text" placeholder="Enter Firstname" name='firstname' value={User.firstname} onChange={getData} />
      </Form.Group>
      <Form.Group as={Col}>
        <Form.Label>LastName</Form.Label>
        <Form.Control type="text" placeholder="Enter LastName" name='lastname'  value={User.lastname} onChange={getData}/>
      </Form.Group>
      </Row>
      <Row className="mb-3">
      <Form.Group as={Col}>
        <Form.Label>Email</Form.Label>
        <Form.Control type="email" placeholder="Enter email" name='email'  value={User.email} onChange={getData}/>
      </Form.Group>

      <Form.Group as={Col}>
        <Form.Label>Password</Form.Label>
        <Form.Control type="password" placeholder="Password" name='password'  value={User.password} onChange={getData}/>
      </Form.Group>
    </Row>

    <Form.Group className="mb-3" id="formGridCheckbox">
      <Form.Check type="checkbox" label="Check me out" />
    </Form.Group>

    <Button variant="primary" type="submit" onClick={DBData}>
      Submit
    </Button>
  </Form>


  <Form method='post' >
    <Row className="mb-3">
    <Form.Group as={Col}>
      <Form.Label>Email</Form.Label>
      <Form.Control type="email"  name='email'  value={LoginUser.email} onChange={LoginData} placeholder="Enter email"/>
    </Form.Group>

    <Form.Group as={Col}>
      <Form.Label>Password</Form.Label>
      <Form.Control type="text" name='password'  value={LoginUser.password} onChange={LoginData}  placeholder="Password"/>
    </Form.Group>
  </Row>

  <Form.Group className="mb-3" id="formGridCheckbox">
    <Form.Check type="checkbox" label="Check me out" />
  </Form.Group>

  <Button variant="primary" type="submit" onClick={LoginVerify}>
   login
  </Button>
</Form> */}

</>
 
  )
}

export default Sign




